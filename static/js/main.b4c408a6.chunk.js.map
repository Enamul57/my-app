{"version":3,"sources":["component/Card/card.component.jsx","component/card-list.component.jsx","component/Search-Box/Search_Box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","card_prp","id","alt","name","email","CardList","propr","console","log","property","map","monster","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchFields","fetch","then","response","json","users","setState","this","filterMonster","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAEaA,EAAO,SAACC,GACjB,OAAQ,sBAAKC,UAAU,iBAAf,UACJ,qBAAKC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,iBAA4DC,IAAI,aACxE,6BAAKL,EAAMG,SAASG,OACpB,6BAAKN,EAAMG,SAASI,YCHfC,G,MAAW,SAACC,GACpB,OAAQ,sBAAKR,UAAY,YAAjB,UACFS,QAAQC,IAAIF,GACXA,EAAMG,SAASC,KAAI,SAAAC,GAAO,OAAI,cAAC,EAAD,CAAuBX,SAAUW,GAAtBA,EAAQV,YCJhDW,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,qBAAKhB,UAAY,SAAjB,SACI,uBAAOiB,KAAK,SACRF,YAAeA,EACfG,SAAYF,QCmCTG,E,kDApCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,SAAU,GACVC,aAAc,KAJL,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACP,SAAUM,S,oBAG5C,WAAS,IAAD,SAE2BE,KAAKT,MAA9BC,EAFF,EAEEA,SAASC,EAFX,EAEWA,aAEVQ,EAAgBT,EAASU,QAAO,SAAAlB,GAAO,OAC3CA,EAAQR,KAAK2B,cAAcC,SAASX,EAAaU,kBAGpD,OADDvB,QAAQC,IAAIoB,GAET,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEe,YAAc,kBACdC,aAAgB,SAAAkB,GACd,EAAKN,SAAS,CAACN,aAAcY,EAAEC,OAAOC,WAG1C,cAAC,EAAD,CAAUzB,SAAUmB,W,GA/BRO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b4c408a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\nexport const Card = (props) =>{\r\n    return (<div className='card-container'>\r\n        <img src={`https://robohash.org/${props.card_prp.id}?size=180x180`} alt=\"monsters\"/>\r\n        <h2>{props.card_prp.name}</h2>\r\n        <h4>{props.card_prp.email}</h4>\r\n        </div>);\r\n}\r\n    \r\n","import React from 'react';\r\nimport  {Card} from './Card/card.component.jsx';\r\nimport './card-list.styles.css';\r\nexport const CardList = (propr) =>{\r\n     return( <div className = 'CardStyle'>\r\n          {console.log(propr)}\r\n          { propr.property.map(monster =>(<Card key={monster.id} card_prp={monster}/>))}\r\n</div>\r\n) \r\n};","import React from 'react';\r\nimport './Search_Box.styles.css';\r\nexport const SearchBox = ({placeholder,handleChange}) => (  \r\n    <div className = \"search\">\r\n        <input type=\"search\"\r\n            placeholder = {placeholder}\r\n            onChange = {handleChange}\r\n        />\r\n    </div>\r\n    );","import  {Component} from 'react';\nimport './App.css';\nimport {CardList} from './component/card-list.component.jsx';\nimport {SearchBox} from './component/Search-Box/Search_Box.component.jsx';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchFields: \" \"\n    };\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\nrender(){\n  \n   const {monsters,searchFields} = this.state;\n   //if searchfield empty it returns monster,if has any letter than returns the match result(something /nothing)\n   const filterMonster = monsters.filter(monster =>\n     monster.name.toLowerCase().includes(searchFields.toLowerCase())\n  ); \n console.log(filterMonster);\n  return (\n    <div className='App'>\n      <h1>Monster Rolodex</h1>\n      <SearchBox \n        placeholder = \"Search Monsters\"\n        handleChange = {e => {\n          this.setState({searchFields: e.target.value })\n        }}\n      />\n      <CardList property={filterMonster}/>\n       \n    </div>\n    );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}